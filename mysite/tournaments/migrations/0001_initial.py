# Generated by Django 2.1.5 on 2019-01-16 04:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('name_j', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deck_code', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='DetailedGameResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prize_took', models.IntegerField(default=-1)),
                ('prize_taken_by_opponent', models.IntegerField(default=-1)),
                ('my_impression', models.CharField(default='Normal', max_length=30)),
                ('opponent_impression', models.CharField(default='Normal', max_length=30)),
                ('memo', models.CharField(default='', max_length=2000)),
                ('is_accidental', models.BooleanField(default=False)),
                ('opponent_accidental', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EntryConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_start_at', models.DateTimeField()),
                ('entry_end_at', models.DateTimeField()),
                ('max_entry_number', models.IntegerField()),
                ('age_min', models.IntegerField()),
                ('age_max', models.IntegerField()),
                ('publish_attendant_list', models.BooleanField(default=True)),
                ('is_lottery', models.BooleanField(default=False)),
                ('min_team_member_number', models.IntegerField(default=1)),
                ('max_team_member_number', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_draw', models.BooleanField(default=False)),
                ('is_bye', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished_at', models.DateTimeField(null=True)),
                ('finished_in_time', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_win_count', models.IntegerField(default=1)),
                ('time_limit_in_second', models.IntegerField(default=1500)),
                ('player1_win_count_in_match', models.IntegerField(default=0)),
                ('player1_lose_count_in_match', models.IntegerField(default=0)),
                ('player1_draw_count_in_match', models.IntegerField(default=0)),
                ('player2_win_count_in_match', models.IntegerField(default=0)),
                ('player2_lose_count_in_match', models.IntegerField(default=0)),
                ('player2_draw_count_in_match', models.IntegerField(default=0)),
                ('is_finished', models.BooleanField(default=False)),
                ('is_draw', models.BooleanField(default=False)),
                ('is_bye', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dropped', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_present', models.BooleanField(default=False)),
                ('is_bye_dummy', models.BooleanField(default=False)),
                ('matches_win_count', models.IntegerField(default=0)),
                ('matches_lose_count', models.IntegerField(default=0)),
                ('draw_count', models.IntegerField(default=0)),
                ('bye_count', models.IntegerField(default=0)),
                ('paired_player', models.ManyToManyField(related_name='_player_paired_player_+', to='tournaments.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Prefecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=3)),
                ('parent_country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Country')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('admin_user', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('parent_series', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tournaments.Series')),
            ],
        ),
        migrations.CreateModel(
            name='SwissRankDecisionPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_public', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('max_player_count', models.IntegerField()),
                ('top_cut_count', models.IntegerField(null=True)),
                ('default_time_limit_in_sec', models.IntegerField(default=1500)),
                ('max_round', models.IntegerField(default=-1)),
                ('max_win_count_in_match', models.IntegerField(default=1)),
                ('bye_win_count_in_match', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=100)),
                ('official_player_id', models.CharField(max_length=20)),
                ('player_valid_until', models.DateTimeField(null=True)),
                ('active_player', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='tournaments.Player')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='active_player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=20)),
                ('parent_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.City')),
            ],
        ),
        migrations.CreateModel(
            name='VenueRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('parent_venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Venue')),
            ],
        ),
        migrations.CreateModel(
            name='DoubleEliminationTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournaments.Tournament')),
                ('decide_third', models.BooleanField(default=True)),
            ],
            bases=('tournaments.tournament',),
        ),
        migrations.CreateModel(
            name='SingleEliminationTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournaments.Tournament')),
            ],
            bases=('tournaments.tournament',),
        ),
        migrations.CreateModel(
            name='SwissTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournaments.Tournament')),
                ('win_point', models.IntegerField(default=3)),
                ('draw_point', models.IntegerField(default=0)),
                ('lose_point', models.IntegerField(default=0)),
                ('rank_decision_policy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.SwissRankDecisionPolicy')),
            ],
            bases=('tournaments.tournament',),
        ),
        migrations.AddField(
            model_name='tournament',
            name='parent_series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Series'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='venue_room',
            field=models.ManyToManyField(to='tournaments.VenueRoom'),
        ),
        migrations.AddField(
            model_name='round',
            name='parent_tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Tournament'),
        ),
        migrations.AddField(
            model_name='player',
            name='parent_tournament',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tournaments.Tournament'),
        ),
        migrations.AddField(
            model_name='player',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='match',
            name='loser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='match_loser', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='parent_round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Round'),
        ),
        migrations.AddField(
            model_name='match',
            name='player1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player_1', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='player2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player_2', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='match_winner', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='first_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='first_player', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='loser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='loser_player', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='parent_match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Match'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='winner_player', to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='entryconfig',
            name='parent_tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Tournament'),
        ),
        migrations.AddField(
            model_name='detailedgameresult',
            name='parent_game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Game'),
        ),
        migrations.AddField(
            model_name='detailedgameresult',
            name='parent_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='deck',
            name='parent_player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Player'),
        ),
        migrations.AddField(
            model_name='country',
            name='parent_region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tournaments.Region'),
        ),
        migrations.AddField(
            model_name='city',
            name='parent_prefecture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournaments.Prefecture'),
        ),
    ]
